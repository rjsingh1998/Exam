<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>




<!-- spring配置文件存放的位置 -->
<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:config/spring/spring.xml</param-value>
</context-param>

<!-- log4j配置文件的存放位置 -->
<context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:config/log4j.properties</param-value>
</context-param>

<!-- 权限过滤 -->
<filter>
    <filter-name>privilegeFilter</filter-name>
    <filter-class>com.jxnu.util.PrivilegeFilter</filter-class>
</filter>

<!-- 解决工程编码过滤器 -->
<filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
    </init-param>
</filter>

<filter-mapping>
    <filter-name>privilegeFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

<filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/</url-pattern>
</filter-mapping>


<!-- 配置spring启动listener入口 spring监听器 -->
<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

<!-- 用于做初始化工作的监听器，一定要配置到Spring的ContextLoaderListener之后，因为要用到Spring的容器对象 -->
<listener>
    <listener-class>com.jxnu.util.InitListener</listener-class>
</listener>

<!-- 定义LOG4J监听器 -->
<listener>
    <listener-class>
        org.springframework.web.util.Log4jConfigListener
    </listener-class>
</listener>



<!-- springmvc前端控制器 -->
<servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <!-- contextConfigLocation配置 springmvc所加载的配置文件，配置处理器映射器、适配器等等 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-servlet.xml(springmvc-servlet.xml) -->

    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:config/spring/springmvc.xml</param-value>
    </init-param>

</servlet>

<!-- springmvc-rest风格前端控制器 -->
<servlet>
    <servlet-name>springmvc-rest</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <!-- contextConfigLocation配置 springmvc所加载的配置文件，配置处理器映射器、适配器等等 如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-servlet.xml(springmvc-servlet.xml) -->

    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:config/spring/springmvc.xml</param-value>
    </init-param>

</servlet>



<!-- 第一种：*.action，方位.action结尾的有DispatcherServlet进行解析 第二种：/，所有访问的地址都由DispatcherServlet解析，对于静态文件的解析我们须要配置不让进行解析，
    使用此种犯方法可以实现Restful风格的url -->

<servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>*.action</url-pattern>
</servlet-mapping>

<servlet-mapping>
    <servlet-name>springmvc-rest</servlet-name>
    <url-pattern>/</url-pattern>
</servlet-mapping>



<!-- 静态页面加载顺序 -->
<welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>login.html</welcome-file>
</welcome-file-list>



</web-app>
